PARALLEL = TRUE)
m3  <- mb.coxmos(method = "sb.splsdacox",
X = X_train, Y = Y_train,
n.comp = cv3$opt.comp,
vector = cv3$opt.nvar,
remove_non_significant = TRUE)
cv4 <- cv.mb.coxmos(method = "mb.splsdrcox",
X = X_train,
Y = Y_train,
MIN_NVAR = 5, MAX_NVAR = 20,
max.ncomp = 1,
n_run = 2,
k_folds = 5,
MIN_EPV = 0.01,
remove_zero_variance = TRUE,
remove_near_zero_variance = TRUE,
remove_variance_at_fold_level = TRUE,
remove_non_significant = FALSE,
PARALLEL = TRUE)
m4  <- mb.coxmos(method = "mb.splsdrcox",
X = X_train, Y = Y_train,
n.comp = cv4$opt.comp,
vector = cv4$opt.nvar)
cv5 <- cv.mb.coxmos(method = "mb.splsdacox",
X = X_train,
Y = Y_train,
MIN_NVAR = 5, MAX_NVAR = 20,
max.ncomp = 1,
n_run = 2,
k_folds = 5,
MIN_EPV = 0.01,
remove_zero_variance = TRUE,
remove_near_zero_variance = TRUE,
remove_variance_at_fold_level = TRUE,
remove_non_significant = FALSE,
PARALLEL = TRUE)
m5  <- mb.coxmos(method = "mb.splsdacox",
X = X_train, Y = Y_train,
n.comp = cv5$opt.comp,
vector = cv5$opt.nvar)
lst_models <- list(
"SB.sPLS-ICOX"           = m1,
"SB.sPLS-DRCOX-Dynamic"  = m2,
"SB.sPLS-DACOX-Dynamic"  = m3,
"MB.sPLS-DRCOX"          = m4,
"MB.sPLS-DACOX"          = m5
)
# i) one single eval call
eval_res <- eval_Coxmos_models(
lst_models   = lst_models,
X_test       = X_test,
Y_test       = Y_test,
times        = NULL,
progress_bar = TRUE
)
all_block_evals[[cancer]] <- list(
models   = lst_models,
eval_res = eval_res
)
########
# at end of iteration show “done” tick:
p(sprintf("Finished %s", cancer))
}
case_ids <- str_extract(
samp_ids,
"(TCGA-[0-9]{2}-[0-9]{4}|[0-9]{2}[A-Z]{2}[0-9]{3}|C3[NL]-[0-9]{5}|NX[0-9]+)"
)
if (any(is.na(case_ids))) {
stop("Failed to parse case_id for: ",
paste(samp_ids[is.na(case_ids)], collapse = ", "))
}
# extract case IDs from the original column names
samp_ids <- colnames(raw_mat)
case_ids <- str_extract(
samp_ids,
"(?<=_matrix_)([0-9]{2}[A-Z]{2}[0-9]{3}|C3[NL]-[0-9]{5}|NX[0-9]+)"
)
case_ids <- str_extract(
samp_ids,
"(?<=_matrix_)([0-9]{2}-[0-9]{4}|[0-9]{2}[A-Z]{2}[0-9]{3}|C3[NL]-[0-9]{5}|NX[0-9]+)"
)
View(omics_for_cancer[["PROT_LUAD_gene"]])
head(colnames(omics_for_cancer[["PROT_LUAD_gene"]]))
case_ids <- str_extract(
samp_ids,
"(?<=_matrix_)(?:[0-9]{2}[A-Z]{2}[0-9]{3}|C3[NL]-[0-9]{5}|NX[0-9]+|TCGA-[0-9]{2}-[0-9]{4})"
)
# extract case IDs from the original column names
samp_ids <- colnames(raw_mat)
case_ids <- str_extract(
samp_ids,
"(?<=_matrix_)(?:[0-9]{2}[A-Z]{2}[0-9]{3}|C3[NL]-[0-9]{5}|NX[0-9]+|TCGA-[0-9]{2}-[0-9]{4})"
)
case_ids <- str_extract(
samp_ids,
"TCGA-[0-9]{2}-[0-9]{4})|(?<=_matrix_)(?:[0-9]{2}[A-Z]{2}[0-9]{3}|C3[NL]-[0-9]{5}|NX[0-9]+"
)
case_ids <- str_extract(
samp_ids,
"TCGA-[0-9]{2}-[0-9]{4})|(?<=_matrix_)(?:[0-9]{2}[A-Z]{2}[0-9]{3}|C3[NL]-[0-9]{5}|NX[0-9]+)"
)
case_ids <- str_extract(
samp_ids,
"(?<=_matrix_)(?:[0-9]{2}[A-Z]{2}[0-9]{3}|
C3[NL]-[0-9]{5}|
NX[0-9]+|
TCGA-[0-9]{2}-[0-9]{4}(?:-[A-Z0-9]{2,4})?
)"
)
# extract case IDs from the original column names
samp_ids <- colnames(raw_mat)
case_ids <- str_extract(
samp_ids,
"(?<=_matrix_)(?:[0-9]{2}[A-Z]{2}[0-9]{3}|
C3[NL]-[0-9]{5}|
NX[0-9]+|
TCGA-[0-9]{2}-[0-9]{4}(?:-[A-Z0-9]{2,4})?
)"
)
unique(clin_df_all$case_id)
View(clin_df_all)
case_ids <- str_extract(
samp_ids,
"TCGA-[0-9]{2}-[0-9]{4}(?:-[A-Z0-9]{2,4})?)"
)
case_ids <- str_extract(
samp_ids,
"TCGA-[0-9]{2}-[0-9]{4}(?:-[A-Z0-9]{2,4})?"
)
case_ids <- str_extract(
samp_ids,
"TCGA-[0-9]{2}-[0-9]{4}(?:-[A-Z0-9]{2,4})?"
)
# b) Preprocess each matrix:
molecular_blocks <- lapply(omics_for_cancer, function(raw_mat) {
# extract case IDs from the original column names
samp_ids <- colnames(raw_mat)
case_ids <- str_extract(
samp_ids,
"TCGA-[0-9]{2}-[0-9]{4}(?:-[A-Z0-9]{2,4})?"
)
if (any(is.na(case_ids))) {
stop("Failed to parse case_id for: ",
paste(samp_ids[is.na(case_ids)], collapse = ", "))
}
colnames(raw_mat) <- case_ids
# transpose & drop >80% missing
m    <- t(raw_mat)
keep <- colMeans(is.na(m)) < 0.8
m2   <- m[, keep, drop = FALSE]
# remember the rownames so we can restore them after imputation
original_rn <- rownames(m2)
# impute
imp <- impute.knn(m2)$data
# restore row and col names
rownames(imp) <- original_rn
colnames(imp) <- colnames(m2)
# drop any accidental "NA." columns
imp[, colnames(imp) != "NA.", drop = FALSE]
})
#Define the single “all-formats” pattern
pattern_all <- "(?<=_matrix_)(?:                               # anchor at “_matrix_”
[0-9]{2}[A-Z]{2}[0-9]{3}                    # 01OV002-style
| C3[NL]-[0-9]{5}                              # C3N-12345 or C3L-67890
| NX[0-9]+                                     # NX12345…
| TCGA-[0-9]{2}-[0-9]{4}(?:-[A-Za-z0-9]{2,4})?  # TCGA-05-4420 or TCGA-05-4420-01A
)"
pattern_all <- gsub("\\s+", "", pattern_all)  # strip out whitespace/comments
pattern_all
# extract case IDs using the unified pattern
case_ids <- str_extract(samp_ids, pattern_all)
if (any(is.na(case_ids))) {
stop("Failed to parse case_id for: ",
paste(samp_ids[is.na(case_ids)], collapse = ", "))
}
raw_mat <- omics_for_cancer[["PROT_LUAD_iso_frac"]]
#Define the single “all-formats” pattern
pattern_all <- "(?<=_matrix_)(?:                               # anchor at “_matrix_”
[0-9]{2}[A-Z]{2}[0-9]{3}                    # 01OV002-style
| C3[NL]-[0-9]{5}                              # C3N-12345 or C3L-67890
| NX[0-9]+                                     # NX12345…
| TCGA-[0-9]{2}-[0-9]{4}(?:-[A-Za-z0-9]{2,4})?  # TCGA-05-4420 or TCGA-05-4420-01A
)"
pattern_all <- gsub("\\s+", "", pattern_all)  # strip out whitespace/comments
# b) Preprocess each matrix:
molecular_blocks <- lapply(omics_for_cancer, function(raw_mat) {
samp_ids <- colnames(raw_mat)
# extract case IDs using the unified pattern
case_ids <- str_extract(samp_ids, pattern_all)
if (any(is.na(case_ids))) {
stop("Failed to parse case_id for: ",
paste(samp_ids[is.na(case_ids)], collapse = ", "))
}
colnames(raw_mat) <- case_ids
# transpose & drop >80% missing
m    <- t(raw_mat)
keep <- colMeans(is.na(m)) < 0.8
m2   <- m[, keep, drop = FALSE]
# remember the rownames so we can restore them after imputation
original_rn <- rownames(m2)
# impute
imp <- impute.knn(m2)$data
# restore row and col names
rownames(imp) <- original_rn
colnames(imp) <- colnames(m2)
# drop any accidental "NA." columns
imp[, colnames(imp) != "NA.", drop = FALSE]
})
#Define the single “all-formats” pattern
pattern_all <- "(?<=_matrix_)(?:[0-9]{2}[A-Z]{2}[0-9]{3}|C3[NL]-[0-9]{5}|NX[0-9]+|TCGA-[0-9]{2}-[0-9]{4}(?:-[A-Za-z0-9]{2,4})?)"
# b) Preprocess each matrix:
molecular_blocks <- lapply(omics_for_cancer, function(raw_mat) {
samp_ids <- colnames(raw_mat)
# extract case IDs using the unified pattern
case_ids <- str_extract(samp_ids, pattern_all)
if (any(is.na(case_ids))) {
stop("Failed to parse case_id for: ",
paste(samp_ids[is.na(case_ids)], collapse = ", "))
}
colnames(raw_mat) <- case_ids
# transpose & drop >80% missing
m    <- t(raw_mat)
keep <- colMeans(is.na(m)) < 0.8
m2   <- m[, keep, drop = FALSE]
# remember the rownames so we can restore them after imputation
original_rn <- rownames(m2)
# impute
imp <- impute.knn(m2)$data
# restore row and col names
rownames(imp) <- original_rn
colnames(imp) <- colnames(m2)
# drop any accidental "NA." columns
imp[, colnames(imp) != "NA.", drop = FALSE]
})
samp_ids <- colnames(raw_mat)
# extract case IDs using the unified pattern
case_ids <- str_extract(samp_ids, pattern_all)
if (any(is.na(case_ids))) {
stop("Failed to parse case_id for: ",
paste(samp_ids[is.na(case_ids)], collapse = ", "))
}
colnames(raw_mat) <- case_ids
raw_mat <- omics_for_cancer[["TRANS_LUAD_iso_frac"]]
#Define the single “all-formats” pattern
pattern_all <- "(?<=_matrix_)(?:[0-9]{2}[A-Z]{2}[0-9]{3}|C3[NL]-[0-9]{5}|NX[0-9]+|TCGA-[0-9]{2}-[0-9]{4}(?:-[A-Za-z0-9]{2,4})?)"
samp_ids <- colnames(raw_mat)
# extract case IDs using the unified pattern
case_ids <- str_extract(samp_ids, pattern_all)
#Define the single “all-formats” pattern
pattern_all <- paste0(
"(?:",
"[0-9]{2}[A-Z]{2}[0-9]{3}",                    # 01OV002-style clinical IDs
"| C3[NL]-[0-9]{5}",                             # C3N-12345 or C3L-67890
"| NX[0-9]+",                                    # NX12345…
"| TCGA-[0-9]{2}-[0-9]{4}(?:-[A-Za-z0-9]{2,4})?" # TCGA-05-4420 or TCGA-05-4420-01A
,")"
)
# remove spaces so the string is valid regex
pattern_all <- gsub("\\s+", "", pattern_all)
samp_ids <- colnames(raw_mat)
# extract case IDs using the unified pattern
case_ids <- str_extract(samp_ids, pattern_all)
for(cancer in selected_ids) {
cat("=== Coxmos for", cancer, "===\n")
# a) grab all your PROT_/TRANS_ blocks for this cancer
omics_for_cancer <- omics_blocks[
str_detect(names(omics_blocks), paste0("^(PROT|TRANS)_", cancer, "_"))
]
#Define the single “all-formats” pattern
pattern_all <- paste0(
"(?:",
"[0-9]{2}[A-Z]{2}[0-9]{3}",                    # 01OV002-style clinical IDs
"| C3[NL]-[0-9]{5}",                             # C3N-12345 or C3L-67890
"| NX[0-9]+",                                    # NX12345…
"| TCGA-[0-9]{2}-[0-9]{4}(?:-[A-Za-z0-9]{2,4})?" # TCGA-05-4420 or TCGA-05-4420-01A
,")"
)
# remove spaces so the string is valid regex
pattern_all <- gsub("\\s+", "", pattern_all)
# b) Preprocess each matrix:
molecular_blocks <- lapply(omics_for_cancer, function(raw_mat) {
samp_ids <- colnames(raw_mat)
# extract case IDs using the unified pattern
case_ids <- str_extract(samp_ids, pattern_all)
if (any(is.na(case_ids))) {
stop("Failed to parse case_id for: ",
paste(samp_ids[is.na(case_ids)], collapse = ", "))
}
colnames(raw_mat) <- case_ids
# transpose & drop >80% missing
m    <- t(raw_mat)
keep <- colMeans(is.na(m)) < 0.8
m2   <- m[, keep, drop = FALSE]
# remember the rownames so we can restore them after imputation
original_rn <- rownames(m2)
# impute
imp <- impute.knn(m2)$data
# restore row and col names
rownames(imp) <- original_rn
colnames(imp) <- colnames(m2)
# drop any accidental "NA." columns
imp[, colnames(imp) != "NA.", drop = FALSE]
})
cat("  • Processed", length(molecular_blocks), "molecular blocks\n")
# c) build your clinical annotation once, based on the first block’s case_ids
sample_ids <- rownames(molecular_blocks[[1]])
samp_anno  <- tibble(case_id = sample_ids) %>%
left_join(clin_df_all, by="case_id") %>%
filter(!is.na(OS_time), !is.na(OS_event)) %>%
distinct(case_id, .keep_all = TRUE)
cat("  • after clinical join/filter:", nrow(samp_anno), "samples remain\n")
# **synchronize** molecular blocks to exactly these case_ids
keep_ids <- samp_anno$case_id
molecular_blocks <- lapply(molecular_blocks, function(m) {
# check that every case_id is present
missing <- setdiff(keep_ids, rownames(m))
if (length(missing) > 0) {
stop("These case_ids are missing from your block:\n  ", paste(missing, collapse=", "))
}
# reorder & subset rows to exactly keep_ids
m[keep_ids, , drop = FALSE]
})
cat("  • synchronized molecular blocks to", length(keep_ids), "samples\n")
##### d) build clinical block ####
samp_anno <- samp_anno %>%
mutate(
age_group  = factor(age_group,  levels = c("<40","40–49","50–59","60–69","70–79","80+")),
sex        = factor(sex,        levels = c("female","male")),
tumor_stage = factor(tumor_stage_clean, levels = c("stage i","stage ii","stage iii","stage iv", "unknown")),
hist_grade = factor(histologic_grade,
levels = c("G1","G2","G3","G4","GX","[unknown]"))
)
# Select and one-hot encode
X_clin_df <- samp_anno %>%
dplyr::select(case_id, age_group, sex, tumor_stage, hist_grade) %>%
column_to_rownames("case_id")
X_clin_onehot <- factorToBinary(X = X_clin_df, all = TRUE, sep = "_")
# Force numeric
X_clin_num <- X_clin_onehot %>%
mutate(across(everything(), ~ as.integer(.))) %>%    # turn "0"/"1" → 0/1 integers
as.matrix()
cat("  • clinical block dims:", dim(X_clin), "\n")
# e) combine into one multiblock list
X_blocks <- c(molecular_blocks, list(clinical = X_clin_num))
# f) response
Y <- samp_anno %>%
transmute(time = OS_time, event = OS_event) %>%
as.data.frame()
rownames(Y) <- samp_anno$case_id
# g) split once:
sp      <- getTrainTest(X_blocks, Y, p=0.7, seed=1234)
X_train <- sp$X_train;  Y_train <- sp$Y_train
X_test  <- sp$X_test;   Y_test  <- sp$Y_test
##### COXMOS ####
# h) cross‐validate + fit each of the models
cv1 <- cv.mb.coxmos("sb.splsicox", X_train, Y_train,
MIN_NVAR=5, MAX_NVAR=20, max.ncomp=1,
n_run=2, k_folds=5, MIN_EPV=0.01,
remove_zero_variance=TRUE,
remove_near_zero_variance=TRUE,
remove_variance_at_fold_level=TRUE,
remove_non_significant=FALSE,
PARALLEL = TRUE)
m1  <- mb.coxmos("sb.splsicox", X_train, Y_train,
n.comp=cv1$opt.comp,
penalty=cv1$opt.penalty,
remove_non_significant=TRUE)
cv2 <- cv.mb.coxmos("sb.splsdrcox", X_train, Y_train,
MIN_NVAR = 5, MAX_NVAR = 20,
max.ncomp = 1,
n_run = 2,
k_folds = 5,
MIN_EPV = 0.01,
remove_zero_variance = TRUE,
remove_near_zero_variance = TRUE,
remove_variance_at_fold_level = TRUE,
remove_non_significant = FALSE,
PARALLEL = TRUE)
m2  <- mb.coxmos(method = "sb.splsdrcox",
X = X_train, Y = Y_train,
n.comp = cv2$opt.comp,
vector = cv2$opt.nvar,
remove_non_significant = TRUE)
cv3 <- cv.mb.coxmos(method = "sb.splsdacox",
X = X_train,
Y = Y_train,
MIN_NVAR = 5, MAX_NVAR = 20,
max.ncomp = 1,
n_run = 2,
k_folds = 5,
MIN_EPV = 0.01,
remove_zero_variance = TRUE,
remove_near_zero_variance = TRUE,
remove_variance_at_fold_level = TRUE,
remove_non_significant = FALSE,
PARALLEL = TRUE)
m3  <- mb.coxmos(method = "sb.splsdacox",
X = X_train, Y = Y_train,
n.comp = cv3$opt.comp,
vector = cv3$opt.nvar,
remove_non_significant = TRUE)
cv4 <- cv.mb.coxmos(method = "mb.splsdrcox",
X = X_train,
Y = Y_train,
MIN_NVAR = 5, MAX_NVAR = 20,
max.ncomp = 1,
n_run = 2,
k_folds = 5,
MIN_EPV = 0.01,
remove_zero_variance = TRUE,
remove_near_zero_variance = TRUE,
remove_variance_at_fold_level = TRUE,
remove_non_significant = FALSE,
PARALLEL = TRUE)
m4  <- mb.coxmos(method = "mb.splsdrcox",
X = X_train, Y = Y_train,
n.comp = cv4$opt.comp,
vector = cv4$opt.nvar)
cv5 <- cv.mb.coxmos(method = "mb.splsdacox",
X = X_train,
Y = Y_train,
MIN_NVAR = 5, MAX_NVAR = 20,
max.ncomp = 1,
n_run = 2,
k_folds = 5,
MIN_EPV = 0.01,
remove_zero_variance = TRUE,
remove_near_zero_variance = TRUE,
remove_variance_at_fold_level = TRUE,
remove_non_significant = FALSE,
PARALLEL = TRUE)
m5  <- mb.coxmos(method = "mb.splsdacox",
X = X_train, Y = Y_train,
n.comp = cv5$opt.comp,
vector = cv5$opt.nvar)
lst_models <- list(
"SB.sPLS-ICOX"           = m1,
"SB.sPLS-DRCOX-Dynamic"  = m2,
"SB.sPLS-DACOX-Dynamic"  = m3,
"MB.sPLS-DRCOX"          = m4,
"MB.sPLS-DACOX"          = m5
)
# i) one single eval call
eval_res <- eval_Coxmos_models(
lst_models   = lst_models,
X_test       = X_test,
Y_test       = Y_test,
times        = NULL,
progress_bar = TRUE
)
all_block_evals[[cancer]] <- list(
models   = lst_models,
eval_res = eval_res
)
########
# at end of iteration show “done” tick:
p(sprintf("Finished %s", cancer))
}
# b) Preprocess each matrix:
molecular_blocks <- lapply(omics_for_cancer, function(raw_mat) {
samp_ids <- colnames(raw_mat)
# now match anywhere in the column name
case_ids <- str_extract(samp_ids, pattern_all)
if (any(is.na(case_ids))) {
stop("Failed to parse case_id for: ",
paste(samp_ids[is.na(case_ids)], collapse = ", "))
}
colnames(raw_mat) <- case_ids
# transpose & drop >80% missing
m    <- t(raw_mat)
keep <- colMeans(is.na(m)) < 0.8
m2   <- m[, keep, drop = FALSE]
# remember the rownames so we can restore them after imputation
original_rn <- rownames(m2)
# impute
imp <- impute.knn(m2)$data
# restore row and col names
rownames(imp) <- original_rn
colnames(imp) <- colnames(m2)
# drop any accidental "NA." columns
imp[, colnames(imp) != "NA.", drop = FALSE]
})
#Define the single “all-formats” pattern
pattern_all <- "(?:[0-9]{2}[A-Z]{2}[0-9]{3}|C3[NL]-[0-9]{5}|NX[0-9]+|TCGA-[A-Z0-9]{2}-[A-Z0-9]{4}(?:-[A-Za-z0-9]{2,4})?)"
samp_ids <- colnames(raw_mat)
# now match anywhere in the column name
case_ids <- str_extract(samp_ids, pattern_all)
# b) Preprocess each matrix:
molecular_blocks <- lapply(omics_for_cancer, function(raw_mat) {
samp_ids <- colnames(raw_mat)
# now match anywhere in the column name
case_ids <- str_extract(samp_ids, pattern_all)
if (any(is.na(case_ids))) {
stop("Failed to parse case_id for: ",
paste(samp_ids[is.na(case_ids)], collapse = ", "))
}
colnames(raw_mat) <- case_ids
# transpose & drop >80% missing
m    <- t(raw_mat)
keep <- colMeans(is.na(m)) < 0.8
m2   <- m[, keep, drop = FALSE]
# remember the rownames so we can restore them after imputation
original_rn <- rownames(m2)
# impute
imp <- impute.knn(m2)$data
# restore row and col names
rownames(imp) <- original_rn
colnames(imp) <- colnames(m2)
# drop any accidental "NA." columns
imp[, colnames(imp) != "NA.", drop = FALSE]
})
Q
