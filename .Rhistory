install.packages("~/Downloads/RStudio-2023.03.1-446.dmg", repos = NULL)
install.packages('tinytex')
tinytex::install_tinytex()
table(Q1data$pval<0.05)
load("/net/pupil1/home/projects/22140/exam2021.Rdata")
load("exam2021.Rdata")
table(Q1data$pval<0.05)
table(Q1data$pval<0.05/nrow(Q1data))
View(Q1data)
table(Q1data$pval<(0.05/nrow(Q1data)))
table(Q1data$pval<0.05)
table(Q1data$pval<0.05/nrow(Q1data))
sum(p.adjust(Q1data$pval, method = "fdr") < 0.05)
table(Q1data$pval<0.05)
table(Q1data$pval<0.05/nrow(Q1data))
sum(p.adjust(Q1data$pval, method = "fdr") < 0.05)
table(Q1data$pval<0.05)
table(Q1data$pval<0.05/nrow(Q1data))
table(Q1data$pval<0.05)
table(Q1data$pval<0.05/nrow(Q1data))
sum(p.adjust(Q1data$pval, method = "fdr") < 0.05)
sum(Q1data$pval<0.05)
sum(Q1data$pval<0.05/nrow(Q1data))
Q1data$log2fc <- log2(Q1data$case_median/Q1data$control_median)
head(Q1data[order(Q1data$log2fc, decreasing = TRUE),])
# Calculate fold change
Q1data$fold_change <- Q1data$case_median / Q1data$control_median
# Log2 transform the fold changes
Q1data$log2_fold_change <- log2(Q1data$fold_change)
# Sort and find the top 5 upregulated genes
top_genes <- head(Q1data[order(-Q1data$log2_fold_change), ], 5)
# Display the top 5 upregulated genes and their log2 fold changes
top_genes
# Sort and find the top 5 upregulated genes
top_genes <- head(Q1data[order(-Q1data$log2_fold_change), c("gene_name", "log2_fold_change")], 5)
Q1data <- Q1data[,-7]
Q1data <- Q1data[,-5]
# Calculate fold change
Q1data$fold_change <- Q1data$case_median / Q1data$control_median
# Log2 transform the fold changes
Q1data$log2fc <- log2(Q1data$fold_change)
# Sort and find the top 5 upregulated genes
top_genes <- head(Q1data[order(-Q1data$log2fc), c("gene", "log2fc")], 5)
# Display the top 5 upregulated genes and their log2 fold changes
top_genes
# Individual PSSM scores for each position
scores = [0.3, 1.0, 0.3, 2.0, 1.7, 2.1, 0.9, 0.8, -1.8]
# Calculating the total score by summing the individual scores
total_score = sum(scores)
total_score
# Individual PSSM scores for each position
scores = [0.3, 1.0, 0.3, 2.0, 1.7, 2.1, 0.9, 0.8, -1.8]
# Individual PSSM scores for each position
scores = c(0.3, 1.0, 0.3, 2.0, 1.7, 2.1, 0.9, 0.8, -1.8)
# Calculating the total score by summing the individual scores
total_score = sum(scores)
total_score
install.packages("~/Downloads/HallmarkAnalyzeR_0.0.1.tar.gz", repos = NULL, type = "source")
library(HallmarkAnalyzeR)
install.packages("~/Downloads/HallmarkAnalyzeR_0.0.1.tar.gz", repos = NULL, type = "source")
install.packages("extrafont")
install.packages("~/Downloads/HallmarkAnalyzeR_0.0.1.tar.gz", repos = NULL, type = "source")
library(devtools)
install.packages("devtools")
install.packages("~/Downloads/HallmarkAnalyzeR_0.0.1.tar.gz", repos = NULL, type = "source")
library(HallmarkAnalyzeR)
library(fgsea)
library(dplyr)
library(stringr)
library(ggplot2)
data("exampleStats")
data("gsEnsemblAll")
data("gsSymbolAll")
data("metaData_cancerHallmarks")
ORARes <- run_ORA( genes = tail(exampleStats, 1800)$GeneID,
universe = exampleStats$GeneID,
analysisName = "ORAExample")
head(ORARes)
View(ORARes)
# Convert the resulting table into an easy to print tibble
summarizeGSEA(ORARes, pvalThreshold = 0.05)
# Visualize the GSEA results in a grouped boxplot able to present multiple analyses in one plot.
enrichmentBoxplot(list(ORARes))
# Visualize the GSEA results in a grouped boxplot able to present multiple analyses in one plot
enrichmentBoxplot(list(ORARes))
# Violin plot
enrichmentViolinplot(list(ORARes))
# Circular plot
CircularBarPlot(ORARes)
View(exampleStats)
load("~/OneDrive - Danmarks Tekniske Universitet/Bachelorprojekt_cleanedFolder/R.data/geneSetCollection.RData")
View(metaData_cancerHallmarks)
# Define parameters
rho <- 1000         # Fluid density (kg/m^3)
eta <- 0.001        # Dynamic viscosity (PaÂ·s)
D <- 5.75e-10       # Diffusion coefficient (m^2/s)
v <- 0.01           # Flow velocity (m/s)
L <- 0.035          # Channel length (m)
w <- 300e-6         # Channel width (m)
h <- 70e-6          # Channel height (m)
# Calculate hydraulic diameter
A <- w * h                   # Cross-sectional area
P <- 2 * (w + h)             # Wetted perimeter
Dh <- (4 * A) / P            # Hydraulic diameter
# Calculate Reynolds number
Re <- (rho * v * Dh) / eta
# Calculate Peclet number
Pe <- (v * Dh) / D
# Calculate residence time
tau_r <- L / v
# Calculate diffusion time
tau_d <- (w^2) / D
# Output results
cat("Hydraulic Diameter (Dh):", Dh, "m\n")
cat("Reynolds Number (Re):", Re, "\n")
cat("Peclet Number (Pe):", Pe, "\n")
cat("Residence Time (tau_r):", tau_r, "s\n")
cat("Diffusion Time (tau_d):", tau_d, "s\n")
library(readr)
X20170207_LC_TMTB1_prot_F9_01 <- read_delim("Desktop/master_thesis_local/TMT10_files/PDC000219_Academia_Sinica_LUAD100-Proteome/20170207_LC_TMTB1_prot_F9_01.psm",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(X20170207_LC_TMTB1_prot_F9_01)
library(readr)
X20170207_LC_TMTB1_prot_F8_01 <- read_delim("Desktop/master_thesis_local/TMT10_files/PDC000219_Academia_Sinica_LUAD100-Proteome/2/Peptide Spectral Matches/Proteome_Batch001-R1/Text/20170207_LC_TMTB1_prot_F8_01.psm",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(X20170207_LC_TMTB1_prot_F8_01)
print(X20170207_LC_TMTB1_prot_F8_01)
glimpse(X20170207_LC_TMTB1_prot_F8_01)
library(dplyr)
glimpse(X20170207_LC_TMTB1_prot_F8_01)
library(readr)
library(readr)
clinical_Pan_cancer_May2022 <- read_delim("Desktop/master_thesis_local/python/data/clinical_Pan-cancer.May2022.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(clinical_Pan_cancer_May2022)
library(readr)
clinical_data <- read_delim("Desktop/master_thesis_local/python/data/clinical_Pan-cancer.May2022.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(clinical_data)
remove(clinical_Pan_cancer_May2022)
clinical_data$case_id
clinical_data$case_id[01OV002]
clinical_data$case_id"01OV002"
clinical_data$case_id["01OV002"]
print(clinical_data[1824])
print(clinical_data[1824,])
glimpse(clinical_data[1824,])
colnames(clinical_data)
setwd("~/Desktop/master_thesis_local/master_thesis_scripts")
